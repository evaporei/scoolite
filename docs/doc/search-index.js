var N = null;var searchIndex = {};
searchIndex["scoolite"]={"doc":"","items":[[3,"Error","scoolite","Main `Error` `struct`, it holds any `message` as `String`.",N,N],[12,"message","","",0,N],[5,"build_command","","This function is just a proxy that creates a `Command` or…",N,[[["string"]],["result",["box","error"]]]],[5,"print_prompt","","Just prints `db >` to the terminal.",N,[[]]],[5,"read_input","","This function flushes the stdout, so that no outputs to…",N,[[],["string"]]],[5,"print_error","","Just prints an `Error`'s `description` to the terminal.",N,[[["error"]]]],[0,"as_any","","Module for `AsAny` trait",N,N],[8,"AsAny","scoolite::as_any","This trait has the purpose of casting between trait…",N,N],[10,"as_any","","",1,[[["self"]],["any"]]],[0,"command","scoolite","Module for `Command`s/`Statement`s of the SQL-like language",N,N],[4,"MetaCommand","scoolite::command","`MetaCommand` is the `enum` that contains all meta…",N,N],[13,"Exit","","",2,N],[4,"Statement","","`Statement` is the `enum` that contains all of the…",N,N],[13,"Insert","","",3,N],[13,"Select","","",3,N],[5,"build_command","","This function is just a proxy that creates a `Command` or…",N,[[["string"]],["result",["box","error"]]]],[5,"build_not_implemented_error","","Creates an `Error` with the default `\"not implemented\"`…",N,[[["str"]],["error"]]],[8,"Command","","The interface that every `Command` asks for is just an…",N,N],[10,"execute","","",4,[[["self"]]]],[11,"from_str","","Tries to parse an `&str` `input` into a `Box<Command>`, if…",2,[[["str"]],["result",["box","error"]]]],[11,"from_str","","Tries to parse an `&str` `input` into a `Box<Command>`, if…",3,[[["str"]],["result",["box","error"]]]],[0,"error","scoolite","Module for `Error` type",N,N],[3,"Error","scoolite::error","Main `Error` `struct`, it holds any `message` as `String`.",N,N],[12,"message","","",0,N],[11,"new","scoolite","Creates a new `Error`.",0,[[["str"]],["self"]]],[0,"io","","Module for interacting with stdio and stdout",N,N],[5,"print_prompt","scoolite::io","Just prints `db >` to the terminal.",N,[[]]],[5,"read_input","","This function flushes the stdout, so that no outputs to…",N,[[],["string"]]],[5,"print_error","","Just prints an `Error`'s `description` to the terminal.",N,[[["error"]]]],[8,"AsAny","scoolite","This trait has the purpose of casting between trait…",N,N],[10,"as_any","","",1,[[["self"]],["any"]]],[8,"Command","","The interface that every `Command` asks for is just an…",N,N],[10,"execute","","",4,[[["self"]]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","scoolite::command","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"as_any","","",2,[[["self"]],["any"]]],[11,"as_any","","",3,[[["self"]],["any"]]],[11,"execute","","Executes an different logic for each variant of the `enum`.",2,[[["self"]]]],[11,"execute","","Executes an different logic for each variant of the `enum`.",3,[[["self"]]]],[11,"eq","","",2,[[["self"],["metacommand"]],["bool"]]],[11,"eq","","",3,[[["self"],["statement"]],["bool"]]],[11,"eq","scoolite","",0,[[["self"],["error"]],["bool"]]],[11,"ne","","",0,[[["self"],["error"]],["bool"]]],[11,"clone","","",0,[[["self"]],["error"]]],[11,"fmt","scoolite::command","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","scoolite","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Just writes the `message` of the `Error` to the `stdout`.",0,[[["self"],["formatter"]],["result"]]],[11,"description","","The description is just the private field `message`.",0,[[["self"]],["str"]]]],"paths":[[3,"Error"],[8,"AsAny"],[4,"MetaCommand"],[4,"Statement"],[8,"Command"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
