var N = null;var searchIndex = {};
searchIndex["scoolite"]={"doc":"","items":[[3,"Row","scoolite","This struct contains the first table available for…",N,N],[12,"id","","",0,N],[12,"username","","",0,N],[12,"email","","",0,N],[3,"Table","","In memory storage of `Row`s.",N,N],[12,"rows","","",1,N],[4,"Error","","Main `Error` type, each `enum` variant represents a…",N,N],[13,"UnrecognizedStatement","","",2,N],[13,"SyntaxError","","",2,N],[5,"build_command","","This function is just a proxy that creates a `Command` or…",N,[[["str"]],["result",["box","error"]]]],[5,"print_prompt","","Just prints `db >` to the terminal.",N,[[]]],[5,"read_input","","This function flushes the stdout, so that no outputs to…",N,[[],["string"]]],[5,"print_error","","Just prints an `Error`'s `description` to the terminal.",N,[[["e"]]]],[0,"as_any","","Module for `AsAny` trait",N,N],[8,"AsAny","scoolite::as_any","This trait has the purpose of casting between trait…",N,N],[10,"as_any","","",3,[[["self"]],["any"]]],[0,"command","scoolite","Module for `Command`s/`Statement`s of the SQL-like language",N,N],[4,"MetaCommand","scoolite::command","`MetaCommand` is the `enum` that contains all meta…",N,N],[13,"Exit","","",4,N],[4,"Statement","","`Statement` is the `enum` that contains all of the…",N,N],[13,"Insert","","",5,N],[13,"Select","","",5,N],[5,"build_command","","This function is just a proxy that creates a `Command` or…",N,[[["str"]],["result",["box","error"]]]],[5,"build_not_implemented_error","","Creates an `Error` with the default `\"not implemented\"`…",N,[[["str"]],["error"]]],[8,"Command","","The interface that every `Command` asks for is just an…",N,N],[10,"execute","","",6,[[["self"],["table"]],["result",["error"]]]],[11,"from_str","","Tries to parse an `&str` `input` into a `Box<Command>`, if…",4,[[["str"]],["result",["box","error"]]]],[11,"from_str","","Tries to parse an `&str` `input` into a `Box<Command>`, if…",5,[[["str"]],["result",["box","error"]]]],[11,"insert","","Creates a new `Row` based of an `input` `&str` and inserts…",5,[[["self"],["str"],["table"]],["result",["error"]]]],[11,"select","","Prints all `Row`s inside of a table. This is what get's…",5,[[["self"],["table"]],["result",["error"]]]],[0,"error","scoolite","Module for `Error` type",N,N],[4,"Error","scoolite::error","Main `Error` type, each `enum` variant represents a…",N,N],[13,"UnrecognizedStatement","","",2,N],[13,"SyntaxError","","",2,N],[11,"get_description","scoolite","This function just get's the description depending of each…",2,[[["self"]],["str"]]],[0,"io","","Module for interacting with stdin and stdout",N,N],[5,"print_prompt","scoolite::io","Just prints `db >` to the terminal.",N,[[]]],[5,"read_input","","This function flushes the stdout, so that no outputs to…",N,[[],["string"]]],[5,"print_error","","Just prints an `Error`'s `description` to the terminal.",N,[[["e"]]]],[0,"table","scoolite","Module for `Table` type",N,N],[3,"Table","scoolite::table","In memory storage of `Row`s.",N,N],[12,"rows","","",1,N],[11,"new","scoolite","Creates a new table.",1,[[],["self"]]],[11,"add_row","","Adds a `Row` into the `rows` `Vec`.",1,[[["self"],["row"]]]],[11,"list_rows","","Returns a reference to all `Row`s inside the table.",1,[[["self"]],["vec"]]],[0,"row","","Module for `Row` type",N,N],[3,"Row","scoolite::row","This struct contains the first table available for…",N,N],[12,"id","","",0,N],[12,"username","","",0,N],[12,"email","","",0,N],[11,"from_str","scoolite","Receives an input like `1 john john@mailbox.com` and it…",0,[[["str"]],["result",["error"]]]],[8,"AsAny","","This trait has the purpose of casting between trait…",N,N],[10,"as_any","","",3,[[["self"]],["any"]]],[8,"Command","","The interface that every `Command` asks for is just an…",N,N],[10,"execute","","",6,[[["self"],["table"]],["result",["error"]]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"to_string","","",0,[[["self"]],["string"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"from","","",2,[[["t"]],["t"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"into","scoolite::command","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"as_any","","",4,[[["self"]],["any"]]],[11,"as_any","","",5,[[["self"]],["any"]]],[11,"execute","","Executes an different logic for each variant of the `enum`.",4,[[["self"],["table"]],["result",["error"]]]],[11,"execute","","Executes an different logic for each variant of the…",5,[[["self"],["table"]],["result",["error"]]]],[11,"eq","","",4,[[["self"],["metacommand"]],["bool"]]],[11,"eq","","",5,[[["self"],["statement"]],["bool"]]],[11,"ne","","",5,[[["self"],["statement"]],["bool"]]],[11,"eq","scoolite","",2,[[["self"],["error"]],["bool"]]],[11,"ne","","",2,[[["self"],["error"]],["bool"]]],[11,"clone","","",2,[[["self"]],["error"]]],[11,"fmt","","Just writes the `message` of the `Error` to the `stdout`.",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","A row like: `Row { id: 1, username: \"john\".to_string(),…",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","scoolite::command","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","scoolite","",2,[[["self"],["formatter"]],["result"]]],[11,"description","","The description is just the private field `message`.",2,[[["self"]],["str"]]]],"paths":[[3,"Row"],[3,"Table"],[4,"Error"],[8,"AsAny"],[4,"MetaCommand"],[4,"Statement"],[8,"Command"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
