var N=null,E="",T="t",U="u",searchIndex={};
var R=["scoolite","as_any","result","error","scoolite::error","string","scoolite::table","try_from","borrow","type_id","borrow_mut","try_into","scoolite::row","to_string","formatter","from_str","Tries to parse an `&str` `input` into a `Box<Command>`, if…","scoolite::command","typeid","execute","statement","MetaCommand","Statement","Module for `AsAny` trait","scoolite::as_any","This trait has the purpose of casting between trait…","Module for `Command`s/`Statement`s of the SQL-like language","build_command","This function is just a proxy that creates a `Command` or…","Command","The interface that every `Command` asks for is just an…","Module for `Error` type","Main `Error` type, each `enum` variant represents a…","UnrecognizedStatement","SyntaxError","Module for interacting with stdin and stdout","print_prompt","scoolite::io","Just prints `db >` to the terminal.","read_input","This function flushes the stdout, so that no outputs to…","print_error","Just prints an `Error`'s `description` to the terminal.","Module for `Table` type","In memory storage of `Row`s.","Creates a new table.","Adds a `Row` into the `rows` `Vec`.","list_rows","Returns a reference to all `Row`s inside the table.","Module for `Row` type","This struct contains the first table available for…","Receives an input like `1 john john@mailbox.com` and it…","to_owned","clone_into","Just writes the `message` of the `Error` to the `stdout`.","A row like: `Row { id: 1, username: \"john\".to_string(),…","description","The description is just the private field `message`.","command","add_row"];
searchIndex["scoolite"]={"doc":E,"i":[[0,R[1],R[0],R[23],N,N],[8,"AsAny",R[24],R[25],N,N],[10,R[1],E,E,0,[[["self"]],["any"]]],[0,R[58],R[0],R[26],N,N],[5,"run_command",R[17],"Receives a table and a string, and tries to build the…",N,[[[R[5]],["table"]],[[R[5]],[R[3]],[R[2],[R[5],R[3]]]]]],[8,R[29],E,R[30],N,N],[10,R[19],E,E,1,[[["self"],["table"]],[[R[5]],[R[3]],[R[2],[R[5],R[3]]]]]],[0,R[3],R[0],R[31],N,N],[4,"Error",R[4],R[32],N,N],[13,R[33],E,E,2,N],[13,R[34],E,E,2,N],[0,"io",R[0],R[35],N,N],[5,R[36],R[37],"Just prints `db > ` to the terminal.",N,[[]]],[5,R[39],E,R[40],N,[[],[R[5]]]],[5,R[41],E,R[42],N,[[[R[3]]]]],[0,"table",R[0],R[43],N,N],[3,"Table",R[6],R[44],N,N],[11,"new",E,R[45],3,[[],["self"]]],[11,R[59],E,R[46],3,[[["self"],["row"]]]],[11,R[47],E,R[48],3,[[["self"]],["vec"]]],[0,"row",R[0],R[49],N,N],[3,"Row",R[12],R[50],N,N],[11,R[15],E,R[51],4,[[["str"]],[[R[2],[R[3]]],[R[3]]]]],[11,R[52],R[4],E,2,[[["self"]],[T]]],[11,R[53],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[13],E,E,2,[[["self"]],[R[5]]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[11],E,E,2,[[],[R[2]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[18]]]],[11,"from",R[6],E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[11],E,E,3,[[],[R[2]]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[R[18]]]],[11,"from",R[12],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[13],E,E,4,[[["self"]],[R[5]]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[11],E,E,4,[[],[R[2]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[18]]]],[11,"clone",R[4],E,2,[[["self"]],[R[3]]]],[11,"eq",E,E,2,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[3]]],["bool"]]],[11,"fmt",E,R[54],2,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[12],R[55],4,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[4],E,2,[[["self"],[R[14]]],[R[2]]]],[11,R[56],E,R[57],2,[[["self"]],["str"]]]],"p":[[8,"AsAny"],[8,R[29]],[4,"Error"],[3,"Table"],[3,"Row"]]};
searchIndex[R[0]]={"doc":E,"i":[[0,R[1],R[0],R[23],N,N],[8,"AsAny",R[24],R[25],N,N],[10,R[1],E,E,0,[[["self"]],["any"]]],[0,R[58],R[0],R[26],N,N],[4,R[21],R[17],"`MetaCommand` is the `enum` that contains all meta…",N,N],[13,"Exit",E,E,1,N],[4,R[22],E,"`Statement` is the `enum` that contains all of the…",N,N],[13,"Insert",E,E,2,N],[13,"Select",E,E,2,N],[5,R[27],E,R[28],N,[[["str"]],[R[2],["box",R[3]]]]],[5,"build_not_implemented_error",E,"Creates an `Error` with the default `\"not implemented\"`…",N,[[["str"]],[R[3]]]],[8,R[29],E,R[30],N,N],[10,R[19],E,E,3,[[["self"],["table"]],[R[2],[R[3]]]]],[11,R[15],E,R[16],1,[[["str"]],[R[2],["box",R[3]]]]],[11,R[15],E,R[16],2,[[["str"]],[R[2],["box",R[3]]]]],[11,"insert",E,"Creates a new `Row` based of an `input` `&str` and inserts…",2,[[["self"],["str"],["table"]],[R[2],[R[3]]]]],[11,"select",E,"Prints all `Row`s inside of a table. This is what get's…",2,[[["self"],["table"]],[R[2],[R[3]]]]],[0,R[3],R[0],R[31],N,N],[4,"Error",R[4],R[32],N,N],[13,R[33],E,E,4,N],[13,R[34],E,E,4,N],[11,"get_description",E,"This function just get's the description depending of each…",4,[[["self"]],["str"]]],[0,"io",R[0],R[35],N,N],[5,R[36],R[37],R[38],N,[[]]],[5,R[39],E,R[40],N,[[],[R[5]]]],[5,R[41],E,R[42],N,[[["e"]]]],[0,"table",R[0],R[43],N,N],[3,"Table",R[6],R[44],N,N],[12,"rows",E,E,5,N],[11,"new",E,R[45],5,[[],["self"]]],[11,R[59],E,R[46],5,[[["self"],["row"]]]],[11,R[47],E,R[48],5,[[["self"]],["vec"]]],[0,"row",R[0],R[49],N,N],[3,"Row",R[12],R[50],N,N],[12,"id",E,E,6,N],[12,"username",E,E,6,N],[12,"email",E,E,6,N],[11,R[15],E,R[51],6,[[["str"]],[R[2],[R[3]]]]],[11,"into",R[17],E,1,[[["self"]],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[7],E,E,1,[[[U]],[R[2]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[18]]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[["self"]],[R[2]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[18]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[2]]]],[11,"into",R[4],E,4,[[["self"]],[U]]],[11,R[52],E,E,4,[[["self"]],[T]]],[11,R[53],E,E,4,N],[11,"from",E,E,4,[[[T]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[5]]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[18]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[2]]]],[11,"into",R[6],E,5,[[["self"]],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[7],E,E,5,[[[U]],[R[2]]]],[11,R[8],E,E,5,[[["self"]],[T]]],[11,R[9],E,E,5,[[["self"]],[R[18]]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,[[["self"]],[R[2]]]],[11,"into",R[12],E,6,[[["self"]],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[13],E,E,6,[[["self"]],[R[5]]]],[11,R[7],E,E,6,[[[U]],[R[2]]]],[11,R[8],E,E,6,[[["self"]],[T]]],[11,R[9],E,E,6,[[["self"]],[R[18]]]],[11,R[10],E,E,6,[[["self"]],[T]]],[11,R[11],E,E,6,[[["self"]],[R[2]]]],[11,R[1],R[17],E,1,[[["self"]],["any"]]],[11,R[1],E,E,2,[[["self"]],["any"]]],[11,R[19],E,"Executes an different logic for each variant of the `enum`.",1,[[["self"],["table"]],[R[2],[R[3]]]]],[11,R[19],E,"Executes an different logic for each variant of the…",2,[[["self"],["table"]],[R[2],[R[3]]]]],[11,"eq",E,E,1,[[["self"],["metacommand"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[20]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[20]]],["bool"]]],[11,"eq",R[4],E,4,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,4,[[["self"],[R[3]]],["bool"]]],[11,"clone",E,E,4,[[["self"]],[R[3]]]],[11,"fmt",E,R[54],4,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[12],R[55],6,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[17],E,1,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",E,E,2,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[4],E,4,[[["self"],[R[14]]],[R[2]]]],[11,R[56],E,R[57],4,[[["self"]],["str"]]]],"p":[[8,"AsAny"],[4,R[21]],[4,R[22]],[8,R[29]],[4,"Error"],[3,"Table"],[3,"Row"]]};
searchIndex[R[0]]={"doc":E,"i":[[0,R[1],R[0],R[23],N,N],[8,"AsAny",R[24],R[25],N,N],[10,R[1],E,E,0,[[["self"]],["any"]]],[0,R[58],R[0],R[26],N,N],[5,R[27],R[17],R[28],N,[[["str"]],[R[2],["box",R[3]]]]],[8,R[29],E,R[30],N,N],[10,R[19],E,E,1,[[["self"],["table"]],[R[2],[R[3]]]]],[0,R[3],R[0],R[31],N,N],[4,"Error",R[4],R[32],N,N],[13,R[33],E,E,2,N],[13,R[34],E,E,2,N],[0,"io",R[0],R[35],N,N],[5,R[36],R[37],R[38],N,[[]]],[5,R[39],E,R[40],N,[[],[R[5]]]],[5,R[41],E,R[42],N,[[["e"]]]],[0,"table",R[0],R[43],N,N],[3,"Table",R[6],R[44],N,N],[11,"new",E,R[45],3,[[],["self"]]],[11,R[59],E,R[46],3,[[["self"],["row"]]]],[11,R[47],E,R[48],3,[[["self"]],["vec"]]],[0,"row",R[0],R[49],N,N],[3,"Row",R[12],R[50],N,N],[11,R[15],E,R[51],4,[[["str"]],[R[2],[R[3]]]]],[11,"into",R[4],E,2,[[["self"]],[U]]],[11,R[52],E,E,2,[[["self"]],[T]]],[11,R[53],E,E,2,N],[11,"from",E,E,2,[[[T]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[5]]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[18]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[2]]]],[11,"into",R[6],E,3,[[["self"]],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[R[18]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[2]]]],[11,"into",R[12],E,4,[[["self"]],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[5]]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[18]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[2]]]],[11,"eq",R[4],E,2,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[3]]],["bool"]]],[11,"clone",E,E,2,[[["self"]],[R[3]]]],[11,"fmt",E,R[54],2,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[12],R[55],4,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[4],E,2,[[["self"],[R[14]]],[R[2]]]],[11,R[56],E,R[57],2,[[["self"]],["str"]]]],"p":[[8,"AsAny"],[8,R[29]],[4,"Error"],[3,"Table"],[3,"Row"]]};
searchIndex[R[0]]={"doc":E,"i":[[0,R[1],R[0],R[23],N,N],[8,"AsAny",R[24],R[25],N,N],[10,R[1],E,E,0,[[["self"]],["any"]]],[0,R[58],R[0],R[26],N,N],[5,R[27],R[17],R[28],N,[[["str"]],[R[2],["box",R[3]]]]],[8,R[29],E,R[30],N,N],[10,R[19],E,E,1,[[["self"],["table"]],[R[2],[R[3]]]]],[0,R[3],R[0],R[31],N,N],[4,"Error",R[4],R[32],N,N],[13,R[33],E,E,2,N],[13,R[34],E,E,2,N],[0,"io",R[0],R[35],N,N],[5,R[36],R[37],R[38],N,[[]]],[5,R[39],E,R[40],N,[[],[R[5]]]],[5,R[41],E,R[42],N,[[["e"]]]],[0,"table",R[0],R[43],N,N],[3,"Table",R[6],R[44],N,N],[11,"new",E,R[45],3,[[],["self"]]],[11,R[59],E,R[46],3,[[["self"],["row"]]]],[11,R[47],E,R[48],3,[[["self"]],["vec"]]],[0,"row",R[0],R[49],N,N],[3,"Row",R[12],R[50],N,N],[11,R[15],E,R[51],4,[[["str"]],[R[2],[R[3]]]]],[11,"into",R[4],E,2,[[["self"]],[U]]],[11,R[52],E,E,2,[[["self"]],[T]]],[11,R[53],E,E,2,N],[11,"from",E,E,2,[[[T]],[T]]],[11,R[13],E,E,2,[[["self"]],[R[5]]]],[11,R[7],E,E,2,[[[U]],[R[2]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[18]]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[["self"]],[R[2]]]],[11,"into",R[6],E,3,[[["self"]],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[7],E,E,3,[[[U]],[R[2]]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"]],[R[18]]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[["self"]],[R[2]]]],[11,"into",R[12],E,4,[[["self"]],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[13],E,E,4,[[["self"]],[R[5]]]],[11,R[7],E,E,4,[[[U]],[R[2]]]],[11,R[8],E,E,4,[[["self"]],[T]]],[11,R[9],E,E,4,[[["self"]],[R[18]]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[["self"]],[R[2]]]],[11,"eq",R[4],E,2,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[3]]],["bool"]]],[11,"clone",E,E,2,[[["self"]],[R[3]]]],[11,"fmt",E,R[54],2,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[12],R[55],4,[[["self"],[R[14]]],[R[2]]]],[11,"fmt",R[4],E,2,[[["self"],[R[14]]],[R[2]]]],[11,R[56],E,R[57],2,[[["self"]],["str"]]]],"p":[[8,"AsAny"],[8,R[29]],[4,"Error"],[3,"Table"],[3,"Row"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);